import React, { createContext, useContext, useState, useEffect } from 'react';

const LanguageContext = createContext();

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};

export const LanguageProvider = ({ children }) => {
  const [currentLanguage, setCurrentLanguage] = useState('en');
  const [isLoading, setIsLoading] = useState(false);

  // Supported languages with their display names
  const supportedLanguages = {
    en: {
      code: 'en',
      name: 'English',
      nativeName: 'English',
      flag: 'ЁЯЗ║ЁЯЗ╕',
      fontClass: 'font-sans'
    },
    hi: {
      code: 'hi',
      name: 'Hindi',
      nativeName: 'рд╣рд┐рдВрджреА',
      flag: 'ЁЯЗоЁЯЗ│',
      fontClass: 'font-hindi'
    },
    te: {
      code: 'te',
      name: 'Telugu',
      nativeName: 'р░др▒Жр░▓р▒Бр░Чр▒Б',
      flag: 'ЁЯЗоЁЯЗ│',
      fontClass: 'font-telugu'
    }
  };

  // Language-specific content
  const translations = {
    en: {
      // Navigation
      home: 'Home',
      upload: 'Upload PDF',
      analysis: 'Analysis',
      schemes: 'Schemes',
      about: 'About',
      
      // Common
      loading: 'Loading...',
      error: 'Error',
      success: 'Success',
      cancel: 'Cancel',
      save: 'Save',
      delete: 'Delete',
      edit: 'Edit',
      view: 'View',
      search: 'Search',
      filter: 'Filter',
      sort: 'Sort',
      
      // Actions
      uploadPdf: 'Upload PDF',
      analyzeDocument: 'Analyze Document',
      viewSchemes: 'View Schemes',
      downloadReport: 'Download Report',
      shareResults: 'Share Results',
      
      // Status
      processing: 'Processing...',
      completed: 'Completed',
      failed: 'Failed',
      pending: 'Pending',
      
      // Messages
      uploadSuccess: 'PDF uploaded successfully!',
      uploadError: 'Failed to upload PDF. Please try again.',
      analysisSuccess: 'Analysis completed successfully!',
      analysisError: 'Analysis failed. Please try again.',
      
      // Form labels
      schemeName: 'Scheme Name',
      description: 'Description',
      eligibility: 'Eligibility',
      benefits: 'Benefits',
      deadline: 'Deadline',
      documents: 'Required Documents',
      
      // Placeholders
      enterSchemeName: 'Enter scheme name...',
      enterDescription: 'Enter description...',
      searchSchemes: 'Search for schemes...',
      
      // Buttons
      getStarted: 'Get Started',
      learnMore: 'Learn More',
      contactUs: 'Contact Us',
      submit: 'Submit',
      reset: 'Reset',
      
      // Headers
      welcomeTitle: 'Welcome to YojanaAI',
      welcomeSubtitle: 'AI-powered government scheme analyzer',
      featuresTitle: 'Features',
      howItWorksTitle: 'How It Works',
      
      // Features
      feature1Title: 'Smart PDF Analysis',
      feature1Desc: 'Upload government scheme PDFs and get instant AI-powered insights',
      feature2Title: 'Multilingual Support',
      feature2Desc: 'Available in English, Hindi, Telugu and more languages',
      feature3Title: 'Voice Interaction',
      feature3Desc: 'Use voice commands for hands-free operation',
      feature4Title: 'Easy Understanding',
      feature4Desc: 'Complex government documents simplified for citizens'
    },
    
    hi: {
      // Navigation
      home: 'рд╣реЛрдо',
      upload: 'рдкреАрдбреАрдПрдл рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
      analysis: 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
      schemes: 'рдпреЛрдЬрдирд╛рдПрдВ',
      about: 'рд╣рдорд╛рд░реЗ рдмрд╛рд░реЗ рдореЗрдВ',
      
      // Common
      loading: 'рд▓реЛрдб рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
      error: 'рддреНрд░реБрдЯрд┐',
      success: 'рд╕рдлрд▓',
      cancel: 'рд░рджреНрдж рдХрд░реЗрдВ',
      save: 'рд╕рд╣реЗрдЬреЗрдВ',
      delete: 'рд╣рдЯрд╛рдПрдВ',
      edit: 'рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ',
      view: 'рджреЗрдЦреЗрдВ',
      search: 'рдЦреЛрдЬреЗрдВ',
      filter: 'рдлрд╝рд┐рд▓реНрдЯрд░',
      sort: 'рдХреНрд░рдордмрджреНрдз рдХрд░реЗрдВ',
      
      // Actions
      uploadPdf: 'рдкреАрдбреАрдПрдл рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
      analyzeDocument: 'рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ',
      viewSchemes: 'рдпреЛрдЬрдирд╛рдПрдВ рджреЗрдЦреЗрдВ',
      downloadReport: 'рд░рд┐рдкреЛрд░реНрдЯ рдбрд╛рдЙрдирд▓реЛрдб рдХрд░реЗрдВ',
      shareResults: 'рдкрд░рд┐рдгрд╛рдо рд╕рд╛рдЭрд╛ рдХрд░реЗрдВ',
      
      // Status
      processing: 'рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ...',
      completed: 'рдкреВрд░реНрдг',
      failed: 'рд╡рд┐рдлрд▓',
      pending: 'рд▓рдВрдмрд┐рдд',
      
      // Messages
      uploadSuccess: 'рдкреАрдбреАрдПрдл рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдкрд▓реЛрдб рд╣реЛ рдЧрдпрд╛!',
      uploadError: 'рдкреАрдбреАрдПрдл рдЕрдкрд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
      analysisSuccess: 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдкреВрд░реНрдг рд╣реБрдЖ!',
      analysisError: 'рд╡рд┐рд╢реНрд▓реЗрд╖рдг рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рдкреБрдирдГ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВред',
      
      // Form labels
      schemeName: 'рдпреЛрдЬрдирд╛ рдХрд╛ рдирд╛рдо',
      description: 'рд╡рд┐рд╡рд░рдг',
      eligibility: 'рдкрд╛рддреНрд░рддрд╛',
      benefits: 'рд▓рд╛рдн',
      deadline: 'рдЕрдВрддрд┐рдо рддрд┐рдерд┐',
      documents: 'рдЖрд╡рд╢реНрдпрдХ рджрд╕реНрддрд╛рд╡реЗрдЬрд╝',
      
      // Placeholders
      enterSchemeName: 'рдпреЛрдЬрдирд╛ рдХрд╛ рдирд╛рдо рджрд░реНрдЬ рдХрд░реЗрдВ...',
      enterDescription: 'рд╡рд┐рд╡рд░рдг рджрд░реНрдЬ рдХрд░реЗрдВ...',
      searchSchemes: 'рдпреЛрдЬрдирд╛рдУрдВ рдХреА рдЦреЛрдЬ рдХрд░реЗрдВ...',
      
      // Buttons
      getStarted: 'рд╢реБрд░реВ рдХрд░реЗрдВ',
      learnMore: 'рдФрд░ рдЬрд╛рдиреЗрдВ',
      contactUs: 'рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВ',
      submit: 'рдЬрдорд╛ рдХрд░реЗрдВ',
      reset: 'рд░реАрд╕реЗрдЯ рдХрд░реЗрдВ',
      
      // Headers
      welcomeTitle: 'рдпреЛрдЬрдирд╛рдЖрдИ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ',
      welcomeSubtitle: 'рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдХ',
      featuresTitle: 'рд╡рд┐рд╢реЗрд╖рддрд╛рдПрдВ',
      howItWorksTitle: 'рдпрд╣ рдХреИрд╕реЗ рдХрд╛рдо рдХрд░рддрд╛ рд╣реИ',
      
      // Features
      feature1Title: 'рд╕реНрдорд╛рд░реНрдЯ рдкреАрдбреАрдПрдл рд╡рд┐рд╢реНрд▓реЗрд╖рдг',
      feature1Desc: 'рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛ рдкреАрдбреАрдПрдл рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ рдФрд░ рддреБрд░рдВрдд рдПрдЖрдИ-рд╕рдВрдЪрд╛рд▓рд┐рдд рдЕрдВрддрд░реНрджреГрд╖реНрдЯрд┐ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ',
      feature2Title: 'рдмрд╣реБрднрд╛рд╖реА рд╕рдорд░реНрдерди',
      feature2Desc: 'рдЕрдВрдЧреНрд░реЗрдЬреА, рд╣рд┐рдВрджреА, рддреЗрд▓реБрдЧреБ рдФрд░ рдЕрдиреНрдп рднрд╛рд╖рд╛рдУрдВ рдореЗрдВ рдЙрдкрд▓рдмреНрдз',
      feature3Title: 'рдЖрд╡рд╛рдЬ рдЗрдВрдЯрд░реИрдХреНрд╢рди',
      feature3Desc: 'рд╣рд╛рде-рдореБрдХреНрдд рд╕рдВрдЪрд╛рд▓рди рдХреЗ рд▓рд┐рдП рдЖрд╡рд╛рдЬ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ',
      feature4Title: 'рдЖрд╕рд╛рди рд╕рдордЭ',
      feature4Desc: 'рдирд╛рдЧрд░рд┐рдХреЛрдВ рдХреЗ рд▓рд┐рдП рдЬрдЯрд┐рд▓ рд╕рд░рдХрд╛рд░реА рджрд╕реНрддрд╛рд╡реЗрдЬрд╝ рд╕рд░рд▓ рдмрдирд╛рдП рдЧрдП'
    },
    
    te: {
      // Navigation
      home: 'р░╣р▒Лр░ор▒Н',
      upload: 'р░кр▒Ар░бр▒Ар░Ор░лр▒Н р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н',
      analysis: 'р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г',
      schemes: 'р░кр░ер░Хр░╛р░▓р▒Б',
      about: 'р░ор░╛ р░Чр▒Бр░░р░┐р░Вр░Ър░┐',
      
      // Common
      loading: 'р░▓р▒Лр░бр▒Н р░Ер░╡р▒Бр░др▒Лр░Вр░жр░┐...',
      error: 'р░▓р▒Лр░кр░В',
      success: 'р░╡р░┐р░Ьр░пр░╡р░Вр░др░В',
      cancel: 'р░░р░жр▒Нр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐',
      save: 'р░╕р▒Зр░╡р▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      delete: 'р░др▒Кр░▓р░Чр░┐р░Вр░Ър░Вр░бр░┐',
      edit: 'р░╕р░╡р░░р░┐р░Вр░Ър░Вр░бр░┐',
      view: 'р░Ър▒Вр░бр░Вр░бр░┐',
      search: 'р░╡р▒Жр░др░Хр░Вр░бр░┐',
      filter: 'р░лр░┐р░▓р▒Нр░Яр░░р▒Н',
      sort: 'р░Хр▒Нр░░р░ор░мр░жр▒Нр░зр░В р░Ър▒Зр░пр░Вр░бр░┐',
      
      // Actions
      uploadPdf: 'р░кр▒Ар░бр▒Ар░Ор░лр▒Н р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      analyzeDocument: 'р░кр░др▒Нр░░р░╛р░ир▒Нр░ир░┐ р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░┐р░Вр░Ър░Вр░бр░┐',
      viewSchemes: 'р░кр░ер░Хр░╛р░▓р░ир▒Б р░Ър▒Вр░бр░Вр░бр░┐',
      downloadReport: 'р░░р░┐р░кр▒Лр░░р▒Нр░Яр▒Н р░бр▒Мр░ир▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      shareResults: 'р░лр░▓р░┐р░др░╛р░▓р░ир▒Б р░кр░Вр░Ър▒Бр░Хр▒Лр░Вр░бр░┐',
      
      // Status
      processing: 'р░кр▒Нр░░р░╛р░╕р▒Жр░╕р▒Н р░Ър▒Зр░╕р▒Нр░др▒Лр░Вр░жр░┐...',
      completed: 'р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐',
      failed: 'р░╡р░┐р░лр░▓р░В',
      pending: 'р░кр▒Жр░Вр░бр░┐р░Вр░Чр▒Н',
      
      // Messages
      uploadSuccess: 'р░кр▒Ар░бр▒Ар░Ор░лр▒Н р░╡р░┐р░Ьр░пр░╡р░Вр░др░Вр░Чр░╛ р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ер░пр░┐р░Вр░жр░┐!',
      uploadError: 'р░кр▒Ар░бр▒Ар░Ор░лр▒Н р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░бр░Вр░▓р▒Л р░╡р░┐р░лр░▓р░В. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.',
      analysisSuccess: 'р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░╡р░┐р░Ьр░пр░╡р░Вр░др░Вр░Чр░╛ р░кр▒Вр░░р▒Нр░др░пр░┐р░Вр░жр░┐!',
      analysisError: 'р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г р░╡р░┐р░лр░▓р░В. р░жр░пр░Ър▒Зр░╕р░┐ р░ор░│р▒Нр░▓р▒А р░кр▒Нр░░р░пр░др▒Нр░ир░┐р░Вр░Ър░Вр░бр░┐.',
      
      // Form labels
      schemeName: 'р░кр░ер░Хр░В р░кр▒Зр░░р▒Б',
      description: 'р░╡р░┐р░╡р░░р░г',
      eligibility: 'р░Ер░░р▒Нр░╣р░д',
      benefits: 'р░▓р░╛р░нр░╛р░▓р▒Б',
      deadline: 'р░Ър░┐р░╡р░░р░┐ р░др▒Зр░жр▒А',
      documents: 'р░Ер░╡р░╕р░░р░ор▒Ир░и р░кр░др▒Нр░░р░╛р░▓р▒Б',
      
      // Placeholders
      enterSchemeName: 'р░кр░ер░Хр░В р░кр▒Зр░░р▒Б р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐...',
      enterDescription: 'р░╡р░┐р░╡р░░р░г р░ир░ор▒Лр░жр▒Б р░Ър▒Зр░пр░Вр░бр░┐...',
      searchSchemes: 'р░кр░ер░Хр░╛р░▓ р░Хр▒Лр░╕р░В р░╡р▒Жр░др░Хр░Вр░бр░┐...',
      
      // Buttons
      getStarted: 'р░кр▒Нр░░р░╛р░░р░Вр░нр░┐р░Вр░Ър░Вр░бр░┐',
      learnMore: 'р░ор░░р░┐р░Вр░д р░др▒Жр░▓р▒Бр░╕р▒Бр░Хр▒Лр░Вр░бр░┐',
      contactUs: 'р░ор░ор▒Нр░ор░▓р▒Нр░ир░┐ р░╕р░Вр░кр▒Нр░░р░жр░┐р░Вр░Ър░Вр░бр░┐',
      submit: 'р░╕р░ор░░р▒Нр░кр░┐р░Вр░Ър░Вр░бр░┐',
      reset: 'р░░р▒Ар░╕р▒Жр░Яр▒Н р░Ър▒Зр░пр░Вр░бр░┐',
      
      // Headers
      welcomeTitle: 'р░пр▒Лр░Ьр░ир░╛р░Жр░пр▒НтАМр░Хр░┐ р░╕р▒Нр░╡р░╛р░Чр░др░В',
      welcomeSubtitle: 'р░Ор░Р-р░Жр░зр░╛р░░р░┐р░д р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Х р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░Хр▒Бр░бр▒Б',
      featuresTitle: 'р░▓р░Хр▒Нр░╖р░гр░╛р░▓р▒Б',
      howItWorksTitle: 'р░Зр░жр░┐ р░Ор░▓р░╛ р░кр░ир░┐ р░Ър▒Зр░╕р▒Нр░др▒Бр░Вр░жр░┐',
      
      // Features
      feature1Title: 'р░╕р▒Нр░ор░╛р░░р▒Нр░Яр▒Н р░кр▒Ар░бр▒Ар░Ор░лр▒Н р░╡р░┐р░╢р▒Нр░▓р▒Зр░╖р░г',
      feature1Desc: 'р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░ер░Х р░кр▒Ар░бр▒Ар░Ор░лр▒НтАМр░▓р░ир▒Б р░Ер░кр▒НтАМр░▓р▒Лр░бр▒Н р░Ър▒Зр░пр░Вр░бр░┐ р░ор░░р░┐р░пр▒Б р░др░Хр▒Нр░╖р░г р░Ор░Р-р░Жр░зр░╛р░░р░┐р░д р░Ер░Вр░др░░р▒Нр░жр▒Гр░╖р▒Нр░Яр▒Бр░▓р░ир▒Б р░кр▒Кр░Вр░жр░Вр░бр░┐',
      feature2Title: 'р░мр░╣р▒Бр░нр░╛р░╖р░╛ р░ор░жр▒Нр░жр░др▒Б',
      feature2Desc: 'р░Жр░Вр░Чр▒Нр░▓р░В, р░╣р░┐р░Вр░жр▒А, р░др▒Жр░▓р▒Бр░Чр▒Б р░ор░░р░┐р░пр▒Б р░Зр░др░░ р░нр░╛р░╖р░▓р░▓р▒Л р░Ер░Вр░жр▒Бр░мр░╛р░Яр▒Бр░▓р▒Л р░Йр░Вр░жр░┐',
      feature3Title: 'р░╡р░╛р░пр░┐р░╕р▒Н р░Зр░Вр░Яр░░р░╛р░Хр▒Нр░╖р░ир▒Н',
      feature3Desc: 'р░Ър▒Зр░др▒Бр░▓р▒Б р░▓р▒Зр░ир░┐ р░Жр░кр░░р▒Зр░╖р░ир▒Н р░Хр▒Лр░╕р░В р░╡р░╛р░пр░┐р░╕р▒Н р░Хр░ор░╛р░Вр░бр▒НтАМр░▓р░ир▒Б р░Йр░кр░пр▒Лр░Чр░┐р░Вр░Ър░Вр░бр░┐',
      feature4Title: 'р░╕р▒Бр░▓р░нр░ор▒Ир░и р░Ер░╡р░Чр░╛р░╣р░и',
      feature4Desc: 'р░кр▒Мр░░р▒Бр░▓ р░Хр▒Лр░╕р░В р░╕р░Вр░Хр▒Нр░▓р░┐р░╖р▒Нр░Яр░ор▒Ир░и р░кр▒Нр░░р░нр▒Бр░др▒Нр░╡ р░кр░др▒Нр░░р░╛р░▓р▒Б р░╕р░░р░│р▒Ар░Хр▒Гр░др░В р░Ър▒Зр░пр░мр░бр▒Нр░бр░╛р░пр░┐'
    }
  };

  // Get translation for current key
  const t = (key) => {
    return translations[currentLanguage]?.[key] || translations.en[key] || key;
  };

  // Change language
  const changeLanguage = (languageCode) => {
    if (supportedLanguages[languageCode]) {
      setCurrentLanguage(languageCode);
      localStorage.setItem('yojanaai-language', languageCode);
    }
  };

  // Get current language info
  const getCurrentLanguageInfo = () => {
    return supportedLanguages[currentLanguage];
  };

  // Get all supported languages
  const getAllLanguages = () => {
    return Object.values(supportedLanguages);
  };

  // Load saved language preference
  useEffect(() => {
    const savedLanguage = localStorage.getItem('yojanaai-language');
    if (savedLanguage && supportedLanguages[savedLanguage]) {
      setCurrentLanguage(savedLanguage);
    }
  }, []);

  const value = {
    currentLanguage,
    changeLanguage,
    t,
    getCurrentLanguageInfo,
    getAllLanguages,
    supportedLanguages,
    isLoading,
    setIsLoading
  };

  return (
    <LanguageContext.Provider value={value}>
      {children}
    </LanguageContext.Provider>
  );
};

export default LanguageProvider;
